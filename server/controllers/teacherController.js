const Teacher = require("../models/Teacher");
const User = require("../models/User");
const Class = require("../models/Class");
const {
  autoGenerateScheduleForClass,
} = require("../services/aiAutomationService");

// ==============================================
// üîπ T·∫†O GI·∫¢NG VI√äN
// ==============================================
exports.createTeacher = async (req, res) => {
  try {
    const { userId, title, name, email, expertise, department, level } =
      req.body;
    const targetUserId = userId || req.user._id;

    // Ch·ªâ admin ho·∫∑c ch√≠nh user ƒë√≥ m·ªõi ƒë∆∞·ª£c t·∫°o
    if (
      req.user.role !== "admin" &&
      req.user._id.toString() !== targetUserId.toString()
    ) {
      return res.status(403).json({
        success: false,
        message: "Kh√¥ng c√≥ quy·ªÅn t·∫°o teacher profile cho user kh√°c",
      });
    }

    const user = await User.findById(targetUserId);
    if (!user)
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y user" });
    if (user.role !== "lecturer") {
      return res.status(400).json({
        success: false,
        message: "User ph·∫£i c√≥ role l√† lecturer",
      });
    }

    const existing = await Teacher.findOne({ user: targetUserId });
    if (existing) {
      return res.status(400).json({
        success: false,
        message: "Teacher profile ƒë√£ t·ªìn t·∫°i",
      });
    }

    const teacher = await Teacher.create({
      user: targetUserId,
      title,
      name: name || user.fullName || user.username,
      email: email || user.email,
      expertise,
      department,
      level,
    });

    await teacher.populate("user");

    res.status(201).json({
      success: true,
      message: "T·∫°o teacher profile th√†nh c√¥ng",
      data: teacher,
    });
  } catch (error) {
    console.error("‚ùå L·ªói createTeacher:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message,
    });
  }
};

// ==============================================
// üîπ L·∫§Y DANH S√ÅCH GI·∫¢NG VI√äN
// ==============================================
exports.getAllTeachers = async (req, res) => {
  try {
    const { search, department, level, page = 1, limit = 10 } = req.query;
    const query = {};

    if (search) {
      query.$or = [
        { name: { $regex: search, $options: "i" } },
        { email: { $regex: search, $options: "i" } },
        { expertise: { $regex: search, $options: "i" } },
        { title: { $regex: search, $options: "i" } },
        { department: { $regex: search, $options: "i" } },
      ];
    }

    if (department) query.department = department;
    if (level) query.level = level;

    const skip = (parseInt(page) - 1) * parseInt(limit);
    const teachers = await Teacher.find(query)
      .populate("user", "username email fullName avatar phone isVerified")
      .limit(parseInt(limit))
      .skip(skip)
      .sort({ createdAt: -1 });

    const total = await Teacher.countDocuments(query);

    res.status(200).json({
      success: true,
      count: teachers.length,
      total,
      page: parseInt(page),
      pages: Math.ceil(total / parseInt(limit)),
      data: teachers,
    });
  } catch (error) {
    console.error("‚ùå L·ªói getAllTeachers:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};

// ==============================================
// üîπ L·∫§Y GI·∫¢NG VI√äN THEO ID
// ==============================================
exports.getTeacherById = async (req, res) => {
  try {
    const teacher = await Teacher.findById(req.params.id).populate(
      "user",
      "username email fullName avatar phone isVerified"
    );

    if (!teacher)
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y teacher" });

    res.status(200).json({ success: true, data: teacher });
  } catch (error) {
    console.error("‚ùå L·ªói getTeacherById:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};

// ==============================================
// üîπ L·∫§Y GI·∫¢NG VI√äN THEO USER ID
// ==============================================
exports.getTeacherByUserId = async (req, res) => {
  try {
    const teacher = await Teacher.findOne({ user: req.params.userId }).populate(
      "user",
      "username email fullName avatar phone isVerified"
    );

    if (!teacher)
      return res
        .status(404)
        .json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y teacher profile cho user n√†y",
        });

    res.status(200).json({ success: true, data: teacher });
  } catch (error) {
    console.error("‚ùå L·ªói getTeacherByUserId:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};

// ==============================================
// üîπ C·∫¨P NH·∫¨T TH√îNG TIN GI·∫¢NG VI√äN
// ==============================================
exports.updateTeacher = async (req, res) => {
  try {
    const teacher = await Teacher.findById(req.params.id);
    if (!teacher)
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y teacher" });

    // Ch·ªâ admin ho·∫∑c ch√≠nh gi·∫£ng vi√™n ƒë∆∞·ª£c update
    if (
      req.user.role !== "admin" &&
      req.user._id.toString() !== teacher.user.toString()
    ) {
      return res
        .status(403)
        .json({
          success: false,
          message: "Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t teacher profile n√†y",
        });
    }

    const { title, name, email, expertise, department, level, teachingDays } =
      req.body;

    if (title !== undefined) teacher.title = title;
    if (name !== undefined) teacher.name = name;
    if (email !== undefined) teacher.email = email;
    if (expertise !== undefined) teacher.expertise = expertise;
    if (department !== undefined) teacher.department = department;
    if (level !== undefined) teacher.level = level;
    if (Array.isArray(teachingDays)) teacher.teachingDays = teachingDays;

    await teacher.save();
    await teacher.populate("user");

    res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t teacher profile th√†nh c√¥ng",
      data: teacher,
    });
  } catch (error) {
    console.error("‚ùå L·ªói updateTeacher:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};

// ==============================================
// üîπ C·∫¨P NH·∫¨T NG√ÄY D·∫†Y & T·ª∞ ƒê·ªòNG X·∫æP L·ªäCH
// ==============================================
exports.updateTeachingDays = async (req, res) => {
  try {
    const { teachingDays } = req.body;

    if (!Array.isArray(teachingDays) || teachingDays.length === 0) {
      return res.status(400).json({
        success: false,
        message: "teachingDays ph·∫£i l√† m·∫£ng h·ª£p l·ªá",
      });
    }

    const allowed = [
      "monday",
      "tuesday",
      "wednesday",
      "thursday",
      "friday",
      "saturday",
      "sunday",
    ];
    const sanitized = teachingDays
      .map((d) => String(d).toLowerCase())
      .filter((d) => allowed.includes(d));

    // üîπ T√¨m ho·∫∑c t·∫°o m·ªõi teacher profile
    let teacher = await Teacher.findOne({ user: req.user._id });
    if (!teacher) {
      teacher = await Teacher.create({
        user: req.user._id,
        name: req.user.fullName || req.user.username,
        email: req.user.email,
        teachingDays: sanitized,
      });
    } else {
      teacher.teachingDays = sanitized;
      await teacher.save();
    }

    // üîπ C·∫≠p nh·∫≠t teachingDays cho t·∫•t c·∫£ l·ªõp m√† gi·∫£ng vi√™n ƒëang d·∫°y
    const activeClasses = await Class.find({
      teacher: teacher._id,
      status: "Active",
    });
    for (const cls of activeClasses) {
      cls.teachingDays = sanitized;
      await cls.save();
    }

    // üîπ G·ªçi AI ƒë·ªÉ t·ª± ƒë·ªông x·∫øp l·ªãch h·ªçc cho t·ª´ng l·ªõp
    const aiResults = [];
    for (const cls of activeClasses) {
      const aiResult = await autoGenerateScheduleForClass(cls._id);
      aiResults.push({
        classId: cls._id,
        classTitle: cls.title,
        aiResult,
      });
    }

    res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t ng√†y gi·∫£ng d·∫°y v√† t·ª± ƒë·ªông x·∫øp l·ªãch th√†nh c√¥ng",
      data: { teachingDays: sanitized, aiResults },
    });
  } catch (error) {
    console.error("‚ùå L·ªói updateTeachingDays:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};

// ==============================================
// üîπ X√ìA GI·∫¢NG VI√äN
// ==============================================
exports.deleteTeacher = async (req, res) => {
  try {
    const teacher = await Teacher.findById(req.params.id);
    if (!teacher)
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y teacher" });

    await teacher.deleteOne();

    res.status(200).json({
      success: true,
      message: "X√≥a teacher profile th√†nh c√¥ng",
    });
  } catch (error) {
    console.error("‚ùå L·ªói deleteTeacher:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};
