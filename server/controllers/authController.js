const User = require('../models/User')
const jwt = require('jsonwebtoken')
const emailService = require('../services/emailService')

// T·∫°o JWT token
const generateToken = (userId) => {
  return jwt.sign({ id: userId }, process.env.JWT_SECRET, {
    expiresIn: '7d' // Token h·∫øt h·∫°n sau 7 ng√†y
  })
}

// Helper: Set token cookie
const setTokenCookie = (res, token) => {
  const cookieOptions = {
    httpOnly: true, // Kh√¥ng th·ªÉ truy c·∫≠p t·ª´ JavaScript (XSS protection)
    secure: process.env.NODE_ENV === 'production', // Ch·ªâ HTTPS trong production
    sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax', // ‚úÖ ƒê·ªîI 'strict' ‚Üí 'none'
    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
    path: '/'
  }
  
  res.cookie('token', token, cookieOptions)
}

// @desc    ƒêƒÉng k√Ω user m·ªõi
// @route   POST /api/auth/register
// @access  Public
exports.register = async (req, res) => {
  try {
    const { username, email, password, fullName, phone } = req.body

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!username || !email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß username, email v√† password'
      })
    }

    // Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i ch∆∞a - ch·ªâ c·∫ßn check existence
    const existingUser = await User.findOne({
      $or: [{ email }, { username }]
    })
      .select('_id email username')
      .lean() // Lightweight query for existence check

    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: existingUser.email === email 
          ? 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' 
          : 'Username ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
      })
    }

    // T·∫°o user m·ªõi
    const user = await User.create({
      username,
      email,
      password,
      fullName,
      phone
    })

    // T·∫°o OTP ƒë·ªÉ x√°c th·ª±c email
    const otp = user.generateOTP()
    await user.save()

    // G·ª≠i OTP qua email
    await emailService.sendOTPRegistration(email, username, otp)
    console.log(`üìß OTP ƒë√£ g·ª≠i ƒë·∫øn ${email}: ${otp}`)

    res.status(201).json({
      success: true,
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c OTP',
      data: {
        userId: user._id,
        email: user.email,
        // Ch·ªâ ƒë·ªÉ dev, x√≥a trong production
        otp: process.env.NODE_ENV === 'development' ? otp : undefined
      }
    })
  } catch (error) {
    console.error('‚ùå L·ªói register:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}

// @desc    X√°c th·ª±c OTP
// @route   POST /api/auth/verify-otp
// @access  Public
exports.verifyOTP = async (req, res) => {
  try {
    const { email, otp } = req.body

    if (!email || !otp) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p email v√† OTP'
      })
    }

    // T√¨m user - c·∫ßn full document ƒë·ªÉ verify OTP
    const user = await User.findOne({ email })

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      })
    }

    // X√°c th·ª±c OTP
    const result = user.verifyOTP(otp)

    if (!result.success) {
      await user.save() // L∆∞u s·ªë l·∫ßn th·ª≠
      return res.status(400).json(result)
    }

    // L∆∞u tr·∫°ng th√°i verified
    await user.save()

    // G·ª≠i email ch√†o m·ª´ng
    await emailService.sendWelcomeEmail(user.email, user.username)

    // T·∫°o token v√† set cookie
    const token = generateToken(user._id)
    setTokenCookie(res, token)

    res.status(200).json({
      success: true,
      message: 'X√°c th·ª±c th√†nh c√¥ng',
      data: {
        user
        // Token kh√¥ng tr·∫£ v·ªÅ trong response, ƒë√£ l∆∞u trong cookie
      }
    })
  } catch (error) {
    console.error('‚ùå L·ªói verify OTP:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}

// @desc    G·ª≠i l·∫°i OTP
// @route   POST /api/auth/resend-otp
// @access  Public
exports.resendOTP = async (req, res) => {
  try {
    const { email } = req.body

    if (!email) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p email'
      })
    }

    const user = await User.findOne({ email })

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      })
    }

    if (user.isVerified) {
      return res.status(400).json({
        success: false,
        message: 'T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c'
      })
    }

    // T·∫°o OTP m·ªõi
    const otp = user.generateOTP()
    await user.save()

    // G·ª≠i OTP qua email
    await emailService.sendOTPRegistration(email, user.username, otp)
    console.log(`üìß OTP m·ªõi ƒë√£ g·ª≠i ƒë·∫øn ${email}: ${otp}`)

    res.status(200).json({
      success: true,
      message: 'OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email',
      data: {
        // Ch·ªâ ƒë·ªÉ dev
        otp: process.env.NODE_ENV === 'development' ? otp : undefined
      }
    })
  } catch (error) {
    console.error('‚ùå L·ªói resend OTP:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}

// @desc    ƒêƒÉng nh·∫≠p
// @route   POST /api/auth/login
// @access  Public
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body

    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p email v√† password'
      })
    }

    // T√¨m user - c·∫ßn password ƒë·ªÉ verify login
    const user = await User.findOne({ email }).select('+password')

    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'Email ho·∫∑c password kh√¥ng ƒë√∫ng'
      })
    }

    // Ki·ªÉm tra password
    const isPasswordValid = await user.comparePassword(password)

    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        message: 'Email ho·∫∑c password kh√¥ng ƒë√∫ng'
      })
    }

    // Ki·ªÉm tra t√†i kho·∫£n ƒë√£ x√°c th·ª±c ch∆∞a
    if (!user.isVerified) {
      return res.status(403).json({
        success: false,
        message: 'Vui l√≤ng x√°c th·ª±c email tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p',
        requireVerification: true
      })
    }

    // Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã kh√≥a kh√¥ng
    if (user.isBlocked) {
      return res.status(403).json({
        success: false,
        message: 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a'
      })
    }

    // C·∫≠p nh·∫≠t th·ªùi gian ƒëƒÉng nh·∫≠p (kh√¥ng trigger password hash)
    user.lastLogin = new Date()
    await user.save({ validateBeforeSave: false })

    // T·∫°o token v√† set cookie
    const token = generateToken(user._id)
    setTokenCookie(res, token)

    // L·∫•y user data kh√¥ng c√≥ password ƒë·ªÉ tr·∫£ v·ªÅ
    const userResponse = await User.findById(user._id)

    res.status(200).json({
      success: true,
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      data: {
        user: userResponse
        // Token kh√¥ng tr·∫£ v·ªÅ trong response, ƒë√£ l∆∞u trong cookie
      }
    })
  } catch (error) {
    console.error('‚ùå L·ªói login:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}

// @desc    ƒêƒÉng xu·∫•t
// @route   POST /api/auth/logout
// @access  Private
exports.logout = (req, res) => {
  try {
    // Clear cookie
    res.cookie('token', '', {
      httpOnly: true,
      expires: new Date(0), // Expire immediately
      path: '/'
    })

    res.status(200).json({
      success: true,
      message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
    })
  } catch (error) {
    console.error('‚ùå L·ªói logout:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}

// @desc    L·∫•y th√¥ng tin user hi·ªán t·∫°i
// @route   GET /api/auth/me
// @access  Private
exports.getMe = async (req, res) => {
  try {
    // req.user ƒë√£ ƒë∆∞·ª£c set b·ªüi protect middleware v·ªõi _id
    const user = await User.findById(req.user._id)

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      })
    }

    res.status(200).json({
      success: true,
      data: user
    })
  } catch (error) {
    console.error('‚ùå L·ªói getMe:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}

// @desc    Qu√™n m·∫≠t kh·∫©u - G·ª≠i OTP
// @route   POST /api/auth/forgot-password
// @access  Public
exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body

    if (!email) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p email'
      })
    }

    // T√¨m user - c·∫ßn full document ƒë·ªÉ generate OTP
    const user = await User.findOne({ email })

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user v·ªõi email n√†y'
      })
    }

    // T·∫°o OTP m·ªõi
    const otp = user.generateOTP()
    await user.save()

    // G·ª≠i OTP qua email
    await emailService.sendOTPResetPassword(email, user.username, otp)

    res.status(200).json({
      success: true,
      message: 'OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email',
      data: {
        // Ch·ªâ ƒë·ªÉ dev
        otp: process.env.NODE_ENV === 'development' ? otp : undefined
      }
    })
  } catch (error) {
    console.error('‚ùå L·ªói forgot password:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}

// @desc    Reset m·∫≠t kh·∫©u v·ªõi OTP
// @route   POST /api/auth/reset-password
// @access  Public
exports.resetPassword = async (req, res) => {
  try {
    const { email, otp, newPassword } = req.body

    if (!email || !otp || !newPassword) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p email, OTP v√† m·∫≠t kh·∫©u m·ªõi'
      })
    }

    const user = await User.findOne({ email })

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      })
    }

    // X√°c th·ª±c OTP
    const result = user.verifyOTP(otp)

    if (!result.success) {
      await user.save()
      return res.status(400).json(result)
    }

    // C·∫≠p nh·∫≠t password m·ªõi
    user.password = newPassword
    await user.save()

    // G·ª≠i email th√¥ng b√°o ƒë·ªïi m·∫≠t kh·∫©u
    await emailService.sendPasswordChangedEmail(user.email, user.username)

    res.status(200).json({
      success: true,
      message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
    })
  } catch (error) {
    console.error('‚ùå L·ªói reset password:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}
