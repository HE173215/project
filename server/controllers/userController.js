const User = require('../models/User')
const emailService = require('../services/emailService')

// @desc    T·∫°o user m·ªõi (Admin only)
// @route   POST /api/users/create
// @access  Private/Admin
exports.createUser = async (req, res) => {
  try {
    const { username, email, password, fullName, phone, role } = req.body

    // Validate required fields
    if (!username || !email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Username, email v√† password l√† b·∫Øt bu·ªôc'
      })
    }

    // Check if user already exists
    const existingUser = await User.findOne({ 
      $or: [{ email }, { username }] 
    })

    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: existingUser.email === email 
          ? 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' 
          : 'Username ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
      })
    }

    // Create user
    const user = await User.create({
      username,
      email,
      password,
      fullName,
      phone,
      role: role || 'student',
      isVerified: false // Admin-created users need email verification
    })

    // T·∫°o OTP ƒë·ªÉ x√°c th·ª±c email
    const otp = user.generateOTP()
    await user.save()

    // G·ª≠i OTP qua email
    await emailService.sendOTPRegistration(email, username, otp)
    console.log(`üìß OTP ƒë√£ g·ª≠i ƒë·∫øn ${email}: ${otp}`)

    res.status(201).json({
      success: true,
      message: 'T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c OTP',
      data: {
        id: user._id,
        username: user.username,
        email: user.email,
        fullName: user.fullName,
        phone: user.phone,
        role: user.role,
        isVerified: user.isVerified,
        otp: process.env.NODE_ENV === 'development' ? otp : undefined
      }
    })
  } catch (error) {
    console.error('‚ùå L·ªói createUser:', error)
    
    if (error.name === 'ValidationError') {
      const messages = Object.values(error.errors).map(err => err.message)
      return res.status(400).json({
        success: false,
        message: messages.join(', ')
      })
    }
    
    res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi t·∫°o ng∆∞·ªùi d√πng',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    })
  }
}

// @desc    L·∫•y t·∫•t c·∫£ users
// @route   GET /api/users
// @access  Private/Admin
exports.getAllUsers = async (req, res) => {
  try {
    // Pagination parameters
    const page = parseInt(req.query.page) || 1
    const limit = parseInt(req.query.limit) || 100
    const skip = (page - 1) * limit

    // Search/filter parameters
    const search = req.query.search || ''
    const role = req.query.role
    const isBlocked = req.query.isBlocked

    // Build query
    const query = {}
    
    if (search) {
      query.$or = [
        { username: { $regex: search, $options: 'i' } },
        { email: { $regex: search, $options: 'i' } },
        { fullName: { $regex: search, $options: 'i' } }
      ]
    }
    
    if (role) {
      query.role = role
    }
    
    if (isBlocked !== undefined) {
      query.isBlocked = isBlocked === 'true'
    }

    // Execute query with pagination and field selection
    const users = await User.find(query)
      .select('-password -otp -resetPasswordToken -resetPasswordExpires -verificationToken')
      .limit(limit)
      .skip(skip)
      .sort({ createdAt: -1 })
      .lean() // Return plain JS objects for better performance

    // Get total count for pagination
    const total = await User.countDocuments(query)

    res.status(200).json({
      success: true,
      count: users.length,
      total,
      page,
      pages: Math.ceil(total / limit),
      data: users
    })
  } catch (error) {
    console.error('‚ùå L·ªói getAllUsers:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}

// @desc    L·∫•y user theo ID
// @route   GET /api/users/:id
// @access  Private
exports.getUserById = async (req, res) => {
  try {
    // Select only necessary fields, exclude sensitive data
    const user = await User.findById(req.params.id)
      .select('-password -otp -resetPasswordToken -resetPasswordExpires -verificationToken')
      .lean()

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      })
    }

    // SECURITY: Ch·ªâ cho ph√©p xem profile c·ªßa ch√≠nh m√¨nh ho·∫∑c admin
    const isOwner = req.user._id.toString() === req.params.id
    const isAdmin = req.user.role === 'admin'

    if (!isOwner && !isAdmin) {
      // Tr·∫£ v·ªÅ th√¥ng tin public cho user kh√°c
      const publicData = {
        _id: user._id,
        username: user.username,
        fullName: user.fullName,
        avatar: user.avatar,
        role: user.role,
        isVerified: user.isVerified,
        createdAt: user.createdAt
      }
      return res.status(200).json({
        success: true,
        data: publicData,
        note: 'Public profile data only'
      })
    }

    // Tr·∫£ v·ªÅ full info cho ch√≠nh m√¨nh ho·∫∑c admin
    res.status(200).json({
      success: true,
      data: user
    })
  } catch (error) {
    console.error('‚ùå L·ªói getUserById:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}

// @desc    C·∫≠p nh·∫≠t th√¥ng tin user
// @route   PUT /api/users/:id
// @access  Private
exports.updateUser = async (req, res) => {
  try {
    const { fullName, phone, avatar } = req.body

    // Ch·ªâ cho ph√©p user c·∫≠p nh·∫≠t th√¥ng tin c·ªßa ch√≠nh m√¨nh ho·∫∑c admin
    if (req.user._id.toString() !== req.params.id && req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin user n√†y'
      })
    }

    const user = await User.findById(req.params.id)

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      })
    }

    // Validate phone number format if provided
    if (phone !== undefined && phone !== '' && phone !== null) {
      const phoneRegex = /^[0-9]{10,11}$/
      if (!phoneRegex.test(phone)) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 10-11 ch·ªØ s·ªë'
        })
      }
    }

    // Validate avatar URL if provided
    if (avatar !== undefined && avatar !== '' && avatar !== null) {
      try {
        new URL(avatar)
      } catch (e) {
        return res.status(400).json({
          success: false,
          message: 'URL avatar kh√¥ng h·ª£p l·ªá'
        })
      }
    }

    // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë∆∞·ª£c ph√©p
    if (fullName !== undefined) user.fullName = fullName
    if (phone !== undefined) user.phone = phone
    if (avatar !== undefined) user.avatar = avatar

    await user.save()

    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
      data: user
    })
  } catch (error) {
    console.error('‚ùå L·ªói updateUser:', error)
    
    // Handle validation errors from Mongoose
    if (error.name === 'ValidationError') {
      const messages = Object.values(error.errors).map(err => err.message)
      return res.status(400).json({
        success: false,
        message: messages.join(', ')
      })
    }
    
    // Handle other specific errors
    if (error.name === 'CastError') {
      return res.status(400).json({
        success: false,
        message: 'ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá'
      })
    }
    
    res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    })
  }
}

// @desc    X√≥a user
// @route   DELETE /api/users/:id
// @access  Private/Admin
exports.deleteUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id)

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      })
    }

    await user.deleteOne()

    res.status(200).json({
      success: true,
      message: 'X√≥a user th√†nh c√¥ng'
    })
  } catch (error) {
    console.error('‚ùå L·ªói deleteUser:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}

// @desc    Kh√≥a/M·ªü kh√≥a user
// @route   PATCH /api/users/:id/block
// @access  Private/Admin
exports.toggleBlockUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id)

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      })
    }

    // Kh√¥ng cho ph√©p kh√≥a ch√≠nh m√¨nh
    if (req.user._id.toString() === req.params.id) {
      return res.status(400).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ kh√≥a ch√≠nh m√¨nh'
      })
    }

    user.isBlocked = !user.isBlocked
    await user.save()

    res.status(200).json({
      success: true,
      message: user.isBlocked ? 'ƒê√£ kh√≥a user' : 'ƒê√£ m·ªü kh√≥a user',
      data: user
    })
  } catch (error) {
    console.error('‚ùå L·ªói toggleBlockUser:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}

// @desc    Thay ƒë·ªïi role user
// @route   PATCH /api/users/:id/role
// @access  Private/Admin
exports.changeUserRole = async (req, res) => {
  try {
    const { role } = req.body

    // Validate role v·ªõi c√°c gi√° tr·ªã m·ªõi
    if (!['admin', 'student', 'lecturer', 'manager'].includes(role)) {
      return res.status(400).json({
        success: false,
        message: 'Role kh√¥ng h·ª£p l·ªá. C√°c role h·ª£p l·ªá: admin, student, lecturer, manager'
      })
    }

    const user = await User.findById(req.params.id)

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      })
    }

    // Kh√¥ng cho ph√©p thay ƒë·ªïi role c·ªßa ch√≠nh m√¨nh
    if (req.user._id.toString() === req.params.id) {
      return res.status(400).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ thay ƒë·ªïi role c·ªßa ch√≠nh m√¨nh'
      })
    }

    const oldRole = user.role
    user.role = role
    await user.save()

    res.status(200).json({
      success: true,
      message: `ƒê√£ thay ƒë·ªïi role th√†nh c√¥ng sang '${role}'`,
      data: user
    })
  } catch (error) {
    console.error('‚ùå L·ªói changeUserRole:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói server',
      error: error.message
    })
  }
}
