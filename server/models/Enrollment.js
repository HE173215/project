const mongoose = require('mongoose')

const enrollmentSchema = new mongoose.Schema(
  {
    // Sinh vi√™n
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: [true, 'User l√† b·∫Øt bu·ªôc']
    },

    // Kh√≥a h·ªçc (student ƒëƒÉng k√Ω theo kh√≥a h·ªçc, ch∆∞a g√°n l·ªõp ngay)
    course: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Course',
      required: [true, 'Kh√≥a h·ªçc l√† b·∫Øt bu·ªôc']
    },

    // L·ªõp h·ªçc (ch·ªâ c√≥ sau khi ƒë∆∞·ª£c Admin/Manager ph√™ duy·ªát)
    class: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Class'
    },

    // Tr·∫°ng th√°i ƒëƒÉng k√Ω
    status: {
      type: String,
      enum: ['PendingApproval', 'Approved', 'DropRequested', 'Rejected', 'Completed', 'Dropped'],
      default: 'PendingApproval'
    },

    // Ng√†y ƒëƒÉng k√Ω
    registrationDate: {
      type: Date,
      default: Date.now
    },

    // Ng√†y ph√™ duy·ªát
    approvalDate: {
      type: Date
    },

    // Ng√†y g·ª≠i y√™u c·∫ßu h·ªßy
    dropRequestDate: {
      type: Date
    },

    // ƒêi·ªÉm s·ªë
    grade: {
      type: Number,
      min: [0, 'ƒêi·ªÉm kh√¥ng th·ªÉ √¢m'],
      max: [100, 'ƒêi·ªÉm kh√¥ng th·ªÉ v∆∞·ª£t qu√° 100']
    },

    // T·ª∑ l·ªá tham gia (%)
    attendanceRate: {
      type: Number,
      min: [0, 'T·ª∑ l·ªá tham gia kh√¥ng th·ªÉ √¢m'],
      max: [100, 'T·ª∑ l·ªá tham gia kh√¥ng th·ªÉ v∆∞·ª£t qu√° 100'],
      default: 0
    },

    // Ghi ch√∫
    notes: {
      type: String,
      trim: true,
      maxlength: [1000, 'Ghi ch√∫ kh√¥ng ƒë∆∞·ª£c qu√° 1000 k√Ω t·ª±']
    }
  },
  {
    timestamps: true
  }
)

//
// üîπ Indexes
//
enrollmentSchema.index({ user: 1, course: 1 }, { unique: true })
enrollmentSchema.index({ course: 1 })
enrollmentSchema.index({ class: 1 })
enrollmentSchema.index({ status: 1 })
enrollmentSchema.index({ registrationDate: 1 })

//
// üîπ Validate role student
//
enrollmentSchema.pre('save', async function (next) {
  if (this.isNew || this.isModified('user')) {
    const User = mongoose.model('User')
    const user = await User.findById(this.user)
    if (!user) return next(new Error('User kh√¥ng t·ªìn t·∫°i'))
    if (user.role !== 'student')
      return next(new Error('Ch·ªâ student m·ªõi c√≥ th·ªÉ ƒëƒÉng k√Ω kh√≥a h·ªçc'))
  }
  next()
})

//
// üîπ T·ª± ƒë·ªông c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng sinh vi√™n khi tr·∫°ng th√°i ƒë·ªïi
//
enrollmentSchema.post('save', async function (doc) {
  if (doc.class && (doc.status === 'Approved' || doc.status === 'Dropped')) {
    const Class = mongoose.model('Class')
    const classDoc = await Class.findById(doc.class)
    if (classDoc) {
      const approvedCount = await mongoose
        .model('Enrollment')
        .countDocuments({ class: doc.class, status: 'Approved' })
      classDoc.currentStudents = approvedCount
      await classDoc.save()
    }
  }
})

//
// üîπ Methods
//

// Ph√™ duy·ªát enrollment
enrollmentSchema.methods.approve = async function (classId) {
  if (this.status !== 'PendingApproval') {
    throw new Error('Ch·ªâ c√≥ th·ªÉ approve enrollment ·ªü tr·∫°ng th√°i PendingApproval')
  }

  const Class = mongoose.model('Class')
  const classDoc = await Class.findById(classId)
  if (!classDoc) throw new Error('L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i')
  if (!classDoc.hasAvailableSlots()) throw new Error('L·ªõp h·ªçc ƒë√£ ƒë·∫ßy')

  this.class = classId
  this.status = 'Approved'
  this.approvalDate = new Date()

  classDoc.currentStudents += 1
  await classDoc.save()

  return this.save()
}

// T·ª´ ch·ªëi enrollment
enrollmentSchema.methods.reject = async function () {
  if (this.status !== 'PendingApproval') {
    throw new Error('Ch·ªâ c√≥ th·ªÉ reject enrollment ·ªü tr·∫°ng th√°i PendingApproval')
  }
  this.status = 'Rejected'
  return this.save()
}

// Student h·ªßy l·ªõp sau khi ƒë∆∞·ª£c approve
enrollmentSchema.methods.drop = async function () {
  if (!['Approved', 'DropRequested'].includes(this.status)) {
    throw new Error('Ch·ªâ c√≥ th·ªÉ drop enrollment ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát ho·∫∑c ƒëang ch·ªù h·ªßy')
  }
  this.status = 'Dropped'
  this.dropRequestDate = null
  await this.save()

  if (this.class) {
    const Class = mongoose.model('Class')
    const classDoc = await Class.findById(this.class)
    if (classDoc) {
      classDoc.currentStudents = Math.max(0, classDoc.currentStudents - 1)
      await classDoc.save()
    }
  }
  return this
}

const Enrollment = mongoose.model('Enrollment', enrollmentSchema)
module.exports = Enrollment
