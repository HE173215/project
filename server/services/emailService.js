const nodemailer = require('nodemailer')

// C·∫•u h√¨nh transporter
const createTransporter = () => {
  return nodemailer.createTransport({
    service: process.env.EMAIL_SERVICE || 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASSWORD
    }
  })
}

// Template email chung
const emailTemplate = (title, content, buttonText, buttonLink) => {
  return `
    <!DOCTYPE html>
    <html lang="vi">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>${title}</title>
      <style>
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          background-color: #f4f7fa;
          padding: 20px;
        }
        .container {
          max-width: 600px;
          margin: 0 auto;
          background-color: #ffffff;
          border-radius: 12px;
          overflow: hidden;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .header {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          padding: 40px 20px;
          text-align: center;
          color: white;
        }
        .header h1 {
          font-size: 28px;
          margin-bottom: 10px;
        }
        .content {
          padding: 40px 30px;
          color: #333333;
          line-height: 1.6;
        }
        .content h2 {
          color: #667eea;
          margin-bottom: 20px;
          font-size: 24px;
        }
        .content p {
          margin-bottom: 15px;
          font-size: 16px;
        }
        .otp-box {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          padding: 20px;
          border-radius: 8px;
          text-align: center;
          margin: 30px 0;
        }
        .otp-code {
          font-size: 36px;
          font-weight: bold;
          letter-spacing: 8px;
          margin: 10px 0;
        }
        .button {
          display: inline-block;
          padding: 14px 35px;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          text-decoration: none;
          border-radius: 8px;
          margin: 20px 0;
          font-weight: 600;
          transition: transform 0.2s;
        }
        .button:hover {
          transform: translateY(-2px);
        }
        .info-box {
          background-color: #f8f9fa;
          border-left: 4px solid #667eea;
          padding: 15px;
          margin: 20px 0;
          border-radius: 4px;
        }
        .footer {
          background-color: #f8f9fa;
          padding: 30px;
          text-align: center;
          color: #666666;
          font-size: 14px;
        }
        .footer p {
          margin-bottom: 10px;
        }
        .social-links {
          margin-top: 20px;
        }
        .social-links a {
          display: inline-block;
          margin: 0 10px;
          color: #667eea;
          text-decoration: none;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>üöÄ ${process.env.APP_NAME || 'Your App'}</h1>
          <p>H·ªá th·ªëng x√°c th·ª±c t√†i kho·∫£n</p>
        </div>
        <div class="content">
          ${content}
          ${buttonText && buttonLink ? `
            <div style="text-align: center;">
              <a href="${buttonLink}" class="button">${buttonText}</a>
            </div>
          ` : ''}
        </div>
        <div class="footer">
          <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
          <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email.</p>
          <p style="margin-top: 20px;">
            <strong>${process.env.APP_NAME || 'Your App'}</strong><br>
            ¬© ${new Date().getFullYear()} All rights reserved.
          </p>
        </div>
      </div>
    </body>
    </html>
  `
}

// Template OTP cho ƒëƒÉng k√Ω
const otpRegistrationTemplate = (username, otp) => {
  const content = `
    <h2>Xin ch√†o ${username}! üëã</h2>
    <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi:</p>
    
    <div class="otp-box">
      <p style="margin: 0; font-size: 14px;">M√£ OTP c·ªßa b·∫°n</p>
      <div class="otp-code">${otp}</div>
      <p style="margin: 0; font-size: 14px;">C√≥ hi·ªáu l·ª±c trong 10 ph√∫t</p>
    </div>
    
    <div class="info-box">
      <p><strong>‚ö†Ô∏è L∆∞u √Ω b·∫£o m·∫≠t:</strong></p>
      <ul style="margin-left: 20px; margin-top: 10px;">
        <li>Kh√¥ng chia s·∫ª m√£ OTP n√†y v·ªõi b·∫•t k·ª≥ ai</li>
        <li>M√£ OTP ch·ªâ c√≥ hi·ªáu l·ª±c trong 10 ph√∫t</li>
        <li>N·∫øu kh√¥ng ph·∫£i b·∫°n th·ª±c hi·ªán, vui l√≤ng b·ªè qua email n√†y</li>
      </ul>
    </div>
  `
  
  return emailTemplate('X√°c th·ª±c t√†i kho·∫£n', content)
}

// Template OTP cho reset password
const otpResetPasswordTemplate = (username, otp) => {
  const content = `
    <h2>Xin ch√†o ${username}! üëã</h2>
    <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n. S·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ ti·∫øp t·ª•c:</p>
    
    <div class="otp-box">
      <p style="margin: 0; font-size: 14px;">M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</p>
      <div class="otp-code">${otp}</div>
      <p style="margin: 0; font-size: 14px;">C√≥ hi·ªáu l·ª±c trong 10 ph√∫t</p>
    </div>
    
    <div class="info-box">
      <p><strong>‚ö†Ô∏è C·∫£nh b√°o b·∫£o m·∫≠t:</strong></p>
      <ul style="margin-left: 20px; margin-top: 10px;">
        <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y</li>
        <li>Kh√¥ng chia s·∫ª m√£ OTP v·ªõi b·∫•t k·ª≥ ai</li>
        <li>M√£ OTP s·∫Ω h·∫øt hi·ªáu l·ª±c sau 10 ph√∫t</li>
      </ul>
    </div>
    
    <p>N·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ, vui l√≤ng li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i.</p>
  `
  
  return emailTemplate('ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u', content)
}

// Template ch√†o m·ª´ng sau khi x√°c th·ª±c th√†nh c√¥ng
const welcomeTemplate = (username) => {
  const content = `
    <h2>Ch√†o m·ª´ng ${username}! üéâ</h2>
    <p>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng!</p>
    
    <div class="info-box">
      <p><strong>‚úÖ B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng:</strong></p>
      <ul style="margin-left: 20px; margin-top: 10px;">
        <li>Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n</li>
        <li>Truy c·∫≠p ƒë·∫ßy ƒë·ªß c√°c d·ªãch v·ª•</li>
        <li>T∆∞∆°ng t√°c v·ªõi c·ªông ƒë·ªìng</li>
      </ul>
    </div>
    
    <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!</p>
  `
  
  return emailTemplate('Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ch√∫ng t√¥i', content, 'B·∫Øt ƒë·∫ßu ngay', process.env.APP_URL || '#')
}

// Template th√¥ng b√°o ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng
const passwordChangedTemplate = (username) => {
  const content = `
    <h2>Xin ch√†o ${username}! üëã</h2>
    <p>M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng.</p>
    
    <div class="info-box">
      <p><strong>üìå Th√¥ng tin:</strong></p>
      <ul style="margin-left: 20px; margin-top: 10px;">
        <li>Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}</li>
        <li>B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi ngay b√¢y gi·ªù</li>
      </ul>
    </div>
    
    <div class="info-box" style="border-left-color: #dc3545; background-color: #fff5f5;">
      <p><strong>‚ö†Ô∏è N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán thay ƒë·ªïi n√†y:</strong></p>
      <p style="margin-top: 10px;">Vui l√≤ng li√™n h·ªá ngay v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£ ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n c·ªßa b·∫°n.</p>
    </div>
  `
  
  return emailTemplate('M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi', content)
}

// H√†m g·ª≠i email
const sendEmail = async (to, subject, htmlContent) => {
  try {
    // Ki·ªÉm tra c·∫•u h√¨nh email
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASSWORD) {
      console.error('‚ùå Thi·∫øu c·∫•u h√¨nh EMAIL_USER ho·∫∑c EMAIL_PASSWORD trong .env')
      return {
        success: false,
        message: 'Ch∆∞a c·∫•u h√¨nh email service'
      }
    }

    const transporter = createTransporter()

    const mailOptions = {
      from: `"${process.env.APP_NAME || 'Your App'}" <${process.env.EMAIL_USER}>`,
      to,
      subject,
      html: htmlContent
    }

    const info = await transporter.sendMail(mailOptions)

    return {
      success: true,
      messageId: info.messageId
    }
  } catch (error) {
    console.error('‚ùå L·ªói g·ª≠i email:', error)
    return {
      success: false,
      message: error.message
    }
  }
}

// Export c√°c h√†m g·ª≠i email c·ª• th·ªÉ
module.exports = {
  // G·ª≠i OTP ƒëƒÉng k√Ω
  sendOTPRegistration: async (email, username, otp) => {
    const html = otpRegistrationTemplate(username, otp)
    return await sendEmail(email, 'X√°c th·ª±c t√†i kho·∫£n - M√£ OTP', html)
  },

  // G·ª≠i OTP reset password
  sendOTPResetPassword: async (email, username, otp) => {
    const html = otpResetPasswordTemplate(username, otp)
    return await sendEmail(email, 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - M√£ OTP', html)
  },

  // G·ª≠i email ch√†o m·ª´ng
  sendWelcomeEmail: async (email, username) => {
    const html = welcomeTemplate(username)
    return await sendEmail(email, 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ch√∫ng t√¥i! üéâ', html)
  },

  // G·ª≠i th√¥ng b√°o ƒë·ªïi m·∫≠t kh·∫©u
  sendPasswordChangedEmail: async (email, username) => {
    const html = passwordChangedTemplate(username)
    return await sendEmail(email, 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi', html)
  },

  // G·ª≠i email t√πy ch·ªânh
  sendCustomEmail: async (email, subject, htmlContent) => {
    return await sendEmail(email, subject, htmlContent)
  }
}
