import { createContext, useContext, useState } from "react";
import axios from "../utils/axiosInstance";
import { message } from "antd";

const ScheduleContext = createContext();

export const ScheduleProvider = ({ children }) => {
  const [schedules, setSchedules] = useState([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(false);

  // =======================================================
  // üîπ GET ALL SCHEDULES (ph√¢n trang + t·ª± ph√¢n quy·ªÅn backend)
  // =======================================================
  const getAllSchedules = async (params = {}) => {
    setLoading(true);
    try {
      const res = await axios.get("/schedules", { params }); // ‚úÖ X√ìA /api
      if (res.data?.success) {
        setSchedules(res.data.data || []);
        setTotal(res.data.total || 0);
      } else {
        setSchedules([]);
        setTotal(0);
      }
    } catch (err) {
      console.error("‚ùå L·ªói getAllSchedules:", err);
      message.error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫£i l·ªãch h·ªçc");
      setSchedules([]);
    } finally {
      setLoading(false);
    }
  };

  // =======================================================
  // üîπ CREATE SCHEDULE
  // =======================================================
  const createSchedule = async (data) => {
    try {
      const res = await axios.post("/schedules", data); // ‚úÖ X√ìA /api
      if (res.data?.success) {
        message.success("T·∫°o l·ªãch h·ªçc th√†nh c√¥ng");
        return res.data.data;
      }
    } catch (err) {
      console.error("‚ùå L·ªói createSchedule:", err);
      message.error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫°o l·ªãch h·ªçc");
      throw err;
    }
  };

  // =======================================================
  // üîπ UPDATE SCHEDULE
  // =======================================================
  const updateSchedule = async (id, data) => {
    try {
      const res = await axios.put(`/schedules/${id}`, data); // ‚úÖ X√ìA /api
      if (res.data?.success) {
        message.success("C·∫≠p nh·∫≠t l·ªãch h·ªçc th√†nh c√¥ng");
        return res.data.data;
      }
    } catch (err) {
      console.error("‚ùå L·ªói updateSchedule:", err);
      message.error(err.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l·ªãch h·ªçc");
      throw err;
    }
  };

  // =======================================================
  // üîπ DELETE SCHEDULE
  // =======================================================
  const deleteSchedule = async (id) => {
    try {
      const res = await axios.delete(`/schedules/${id}`); // ‚úÖ X√ìA /api
      if (res.data?.success) {
        message.success("X√≥a l·ªãch h·ªçc th√†nh c√¥ng");
      }
    } catch (err) {
      console.error("‚ùå L·ªói deleteSchedule:", err);
      message.error(err.response?.data?.message || "Kh√¥ng th·ªÉ x√≥a l·ªãch h·ªçc");
      throw err;
    }
  };

  // =======================================================
  // üîπ GET SCHEDULES BY CLASS (kh√¥ng ph√¢n trang)
  // =======================================================
  const getSchedulesByClass = async (classId) => {
    setLoading(true);
    try {
      const res = await axios.get(`/schedules/class/${classId}`); // ‚úÖ X√ìA /api
      if (res.data?.success) {
        setSchedules(res.data.data || []);
        setTotal(res.data.count || 0);
      } else {
        setSchedules([]);
        setTotal(0);
      }
    } catch (err) {
      console.error("‚ùå L·ªói getSchedulesByClass:", err);
      message.error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫£i l·ªãch h·ªçc theo l·ªõp");
      setSchedules([]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <ScheduleContext.Provider
      value={{
        schedules,
        total,
        loading,
        getAllSchedules,
        createSchedule,
        updateSchedule,
        deleteSchedule,
        getSchedulesByClass,
      }}
    >
      {children}
    </ScheduleContext.Provider>
  );
};

export const useSchedule = () => useContext(ScheduleContext);